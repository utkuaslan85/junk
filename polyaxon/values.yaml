deploymentChart: platform
deploymentType: kubernetes
namespace: polyaxon
limitResources: false

rbac:
  enabled: true

ingress:
  enabled: false
  backend: gateway
  hostName:
  # Default path is `/`
  path:
  # Extra paths to prepend to every host configuration. This is useful when configuring custom actions with
  # [AWS ALB Ingress Controller](https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/ingress/annotation/#actions).
  extraPaths: []
  # - path: /*
  #   backend:
  #     serviceName: ssl-redirect
  #     servicePort: use-annotation
  # Ingress TLS configuration
  # Secrets must be manually created in the namespace
  tls: []
  # - secretName: polyaxon.cluster.local-tls
  #   hosts:
  #     - polyaxon.cluster.local

  # Ingress extra labels
  labels:

  # Default annotation, some of these values allow uploading large files to the API
  # if you are using a different ingress other than nginx, you need to adapt the annotations.
  annotations:

  #  ingress.kubernetes.io/ssl-redirect: "false"
  #  ingress.kubernetes.io/rewrite-target: /
  #  ingress.kubernetes.io/add-base-url: "true"
  #  ingress.kubernetes.io/proxy-connect-timeout: "600"
  #  ingress.kubernetes.io/proxy-read-timeout: "600"
  #  ingress.kubernetes.io/proxy-send-timeout: "600"
  #  ingress.kubernetes.io/send-timeout: "600"
  #  ingress.kubernetes.io/proxy-body-size: 4G

  # kubernetes.io/tls-acme: 'true'

# To set ssl and serve https with Polyaxon deployed with NodePort service
ssl: {}

# Custom cluster dns setup
dns: {}

# To provide a secret name with all passwords and api keys instead of using the config.yaml deployment file
# provide only services used in your deployment.
platformSecret:
agentSecret:

# If scheduler is enabled a broker must be set options: redis | rabbitmq, default: rabbitmq
# If broker == rabbitmq: rabbitmq-ha or external rabbitmq must be enabled
# If broker == redis: redis or external redis must be enabled
broker: rabbitmq

# If you enable ingress, please set the gateway service type value to:
#    * ClusterIP or NodePort (on GKE you cannot use ClusterIP)
# Otherwise you should set it to ClusterIP (default)
gateway:
  enabled: true
  image: polyaxon/polyaxon-gateway
  imageTag: 1.10.1
  imagePullPolicy: IfNotPresent
  replicas: 1
  resources:
    limits:
      cpu: 500m
      memory: 2000Mi
    requests:
      cpu: 100m
      memory: 50Mi

  service:
    name: gateway
    type: ClusterIP
    port: 80
    targetPort: 80
    nodePort: 31833
    annotations: {}


api:
  enabled: true
  useResolver: true
  image: polyaxon/polyaxon-api
  imageTag: 1.10.1
  imagePullPolicy: IfNotPresent
  replicas: 1
  resources:
    limits:
      cpu: 1000m
      memory: 2000Mi
    requests:
      cpu: 128m
      memory: 300Mi

  service:
    name: api
    type: ClusterIP
    port: 80
    targetPort: 80
    nodePort: 31811
    annotations: {}

  hpa:
    enabled: false
    cputhreshold: 70
    minpods: 1
    maxpods: 4

streams:
  enabled: true
  image: polyaxon/polyaxon-streams
  imageTag: 1.10.1
  imagePullPolicy: IfNotPresent
  replicas: 1
  resources:
    limits:
      cpu: 1000m
      memory: 2000Mi
    requests:
      cpu: 128m
      memory: 300Mi

  service:
    name: streams
    type: ClusterIP
    port: 80
    targetPort: 80
    nodePort: 31822
    annotations: {}

  hpa:
    enabled: false
    cputhreshold: 70
    minpods: 1
    maxpods: 4

init:
  image: polyaxon/polyaxon-init
  imageTag: 1.10.1
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 1000m
      memory: 2000Mi
    requests:
      cpu: 100m
      memory: 100Mi

sidecar:
  image: polyaxon/polyaxon-sidecar
  imageTag: 1.10.1
  imagePullPolicy: IfNotPresent
  sleepInterval: 10
  syncInterval: 10
  resources:
    limits:
      cpu: 1000m
      memory: 2000Mi
    requests:
      cpu: 100m
      memory: 100Mi

agent:
  token:
  instance:
  compressedLogs: false
  enabled: false
  image: polyaxon/polyaxon-agent
  imageTag: 1.10.1
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 500m
      memory: 2000Mi
    requests:
      cpu: 100m
      memory: 100Mi

operator:
  enabled: true
  skipCRD: false
  useCRDV1Beta1: false
  image: polyaxon/polyaxon-operator
  imageTag: 1.10.1
  imagePullPolicy: IfNotPresent
  maxConcurrentReconciles: 1
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 50Mi

scheduler:
  enabled: false
  image: polyaxon/polyaxon-scheduler
  imageTag: 1.10.1
  imagePullPolicy: IfNotPresent
  replicas: 1
  concurrency: 2
  resources:
    limits:
      cpu: 350m
      memory: 350Mi
    requests:
      cpu: 150m
      memory: 200Mi
  celery: {}
  hpa:
    enabled: false
    cputhreshold: 70
    minpods: 1
    maxpods: 4

compiler:
  enabled: false
  image:
  imageTag: 1.10.1
  imagePullPolicy: IfNotPresent
  replicas: 1
  concurrency: 2
  resources:
    limits:
      cpu: 200m
      memory: 300Mi
    requests:
      cpu: 130m
      memory: 200Mi
  celery: {}
  hpa:
    enabled: false
    cputhreshold: 70
    minpods: 1
    maxpods: 4

worker:
  enabled: false
  image:
  imageTag: 1.10.1
  imagePullPolicy: IfNotPresent
  replicas: 1
  concurrency: 2
  resources:
    limits:
      cpu: 200m
      memory: 300Mi
    requests:
      cpu: 130m
      memory: 200Mi
  celery: {workerPrefetchMultiplier: 10}
  hpa:
    enabled: false
    cputhreshold: 70
    minpods: 1
    maxpods: 4

beat:
  enabled: false
  image:
  imageTag: 1.10.1
  imagePullPolicy: IfNotPresent
  replicas: 1
  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 128Mi

flower:
  enabled: false
  image: mher/flower
  imageTag: latest
  imagePullPolicy: IfNotPresent
  replicas: 1
  resources:
    limits:
      cpu: 200m
      memory: 300Mi
    requests:
      cpu: 130m
      memory: 200Mi

  service:
    name: flower
    type: NodePort
    port: 8888
    targetPort: 8888
    nodePort: 30679
    annotations: {}

apiHooks: {}

cleanHooks:
  image: polyaxon/polyaxon-cli
  imageTag: 1.10.1
  imagePullPolicy: IfNotPresent

tablesHook:
  image: polyaxon/polyaxon-tables
  imageTag: 0.4.4
  imagePullPolicy: IfNotPresent

externalServices:
  postgresql:
    user:
    password:
    database:
    host:
    port:
    connMaxAge: 60

  redis:
    usePassword:
    password:
    host:
    port:

  rabbitmq:
    user:
    password:
    host:
    port:

  gateway: {}
  api: {}
  allowedVersions: []

  metrics:
    enabled: false
    backend:
    options:

  analytics:
    enabled: false
    backend:
    options:

  transactions:
    enabled: false
    backend:
    options:

  errors:
    enabled: false
    backend:
    options:

  auth:
    github:
      enabled: false
      options:
    gitlab:
      enabled: false
      options:
    bitbucket:
      enabled: false
      options:
    google:
      enabled: false
      options:
    saml:
      enabled: false
      options:

postgresql:
  # Whether to deploy a postgres server in-cluster.
  # To use an external postgres instance:
  #  * set enabled to False, to disable the in-cluster deployment
  #  * configure external postgresql required attributes in services.postgresql
  enabled: true
  connMaxAge: 60
  postgresqlUsername: polyaxon
  postgresqlPassword: polyaxon
  postgresqlDatabase: polyaxon
  persistence:
    enabled: false
    size: 2Gi
  master:
    affinity:
      podAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: type
                operator: In
                values:
                - "polyaxon-core"
            topologyKey: "kubernetes.io/hostname"

redis:
  # Whether to deploy a redis server in-cluster.
  # To use an external redis instance:
  #  * set enabled to False, to disable the in-cluster deployment
  #  * configure external redis required attributes in services.redis
  enabled: false
  usePassword: false
  password:
  image:
#    repository: redis
    tag: 5.0.4
#  password: polyaxon
  port: 6379
  master:
    persistence:
      enabled: true
  affinity:
    podAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: type
                operator: In
                values:
                - "polyaxon-core"
            topologyKey: "kubernetes.io/hostname"

rabbitmq-ha:
  # Whether to deploy a rabbitmq server in-cluster.
  # To use an external rabbitmq instance:
  #  * set enabled to False, to disable the in-cluster deployment
  #  * configure external rabbitmq required attributes in services.rabbitmq
  enabled: false
  replicaCount: 1
  rabbitmqUsername: polyaxon
  rabbitmqPassword: polyaxon
  resources:
    requests:
      memory: 256Mi
      cpu: 300m
  affinity:
    podAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: type
                operator: In
                values:
                - "polyaxon-core"
            topologyKey: "kubernetes.io/hostname"


## Prometheus Exporter / Metrics
metrics:
  enabled: false

  ## Configure extra options for liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1

  ## Metrics exporter resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  resources: {}
  #   limits:
  #     cpu: 100m
  #     memory: 100Mi
  #   requests:
  #     cpu: 100m
  #     memory: 100Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}
  # schedulerName:
  # Optional extra labels for pod, i.e. redis-client: "true"
  # podLabels: []
  service:
    type: ClusterIP
    labels: {}

  image:
    repository: prom/statsd-exporter
    tag: v0.10.5
    pullPolicy: IfNotPresent

  # Enable this if you're using https://github.com/coreos/prometheus-operator
  serviceMonitor:
    enabled: false
    ## Specify a namespace if needed
    # namespace: monitoring
    # fallback to the prometheus default unless specified
    # interval: 10s
    ## Defaults to what's used if you follow CoreOS [Prometheus Install Instructions](https://github.com/helm/charts/tree/master/stable/prometheus-operator#tldr)
    ## [Prometheus Selector Label](https://github.com/helm/charts/tree/master/stable/prometheus-operator#prometheus-operator-1)
    ## [Kube Prometheus Selector Label](https://github.com/helm/charts/tree/master/stable/prometheus-operator#exporters)
    selector:
      prometheus: kube-prometheus

# Please do not change this value,
# if you want to provide a custom artifacts store, please use artifactsStore.
# This is used as a fallback when no artifactsStore is provided
defaultArtifactsStore:
  name: default-artifacts-store
  kind: host_path
  schema: {"hostPath": "/tmp/artifactsStore", "mountPath": "/artifactsStore"}

artifactsStore:
connections: []

imagePullSecrets: []

# Initial admin user to create
user:
  username: "rootuser"
  email: "rootuser@polyaxon.local"
  password: "rootpassword"

# Time zone
timezone: 'UTC'
encryptionSecret:

# Include helm chart release revision
includeChartRevision: true

# Security context to apply to Polyaxon core services
securityContext:
  enabled: false
  user: 2222
  group: 2222

ldap:
  enabled: false
  serverUri:
  globalOptions: {}
  connectionOptions: {}
  bindDN:
  bindPassword:
  userSearchBaseDN:
  userSearchFilterStr:
  userDNTemplate:
  startTLS: false
  userAttrMap: {}
  groupSearchBaseDN:
  groupSearchGroupType:
  requireGroup:
  denyGroup:

nodeSelector: {}
tolerations: []
affinity:
  podAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: type
              operator: In
              values:
              - "polyaxon-core"
          topologyKey: "kubernetes.io/hostname"

passwordLength: 8

email:
  enabled: false
  host: smtp
  port: 25
  useTls: false
  hostUser: ""
  hostPassword: ""

# To receive email/notification with correct host
# hostName: 159.203.150.212 or polyaxon.foo.com

# White list of ip/hosts that can communicate with the api
# allowedHosts:
#  - 127.0.0.1
#  - 159.203.150.212

intervals:  # in seconds
  runsScheduler: 15
  operationsDefaultRetryDelay: 60
  operationsMaxRetryDelay: 3600
  compatibilityCheck: 1800

auth: {}

istio: {}
operators: {}
ui: {}
